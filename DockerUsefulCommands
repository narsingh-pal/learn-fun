Dockerfile defines what goes on in the environment inside your container. 
Access to resources like networking interfaces and disk drives is virtualized inside this environment, 
which is isolated from the rest of your system, so you need to map ports to the outside world, 
and be specific about what files you want to “copy in” to that environment. 
However, after doing that, you can expect that the build of your app defined in this Dockerfile behaves exactly the same 
wherever it runs.


DOCKER

1. list docker images
    docker images

2. run docker image
    docker run imagename

3. Remove docker image
    docker rmi imageId

4. docker-compose up

5. Rebuild Docker
    docker-compose build

5. Clean docker
    docker stop $(docker ps -a -q)
    docker rm $(docker ps -a -q)
    docker system prune -a
6. list docker containers
    docker ps

7. Bash Shell Docker
    docker exec -it <mycontainer> bash

8. docker inspect <mycontainer>


9. apt-get update && apt-get install telnet

10. docker-machine ls

11. Docker Tomcat
    docker run --name tomcat8 -it --rm -p 8888:8080 tomcat:8.0
    
12. docker build -t friendlyhello .
This creates a Docker image, which we’re going to tag using -t so it has a friendly name.

13. docker run -p 4000:80 friendlyhello
Run the app, mapping your machine’s port 4000 to the container’s published port 80 using -p

Docker keywords 
https://docs.docker.com/engine/reference/builder/


https://docs.docker.com/engine/reference/run/#general-form

volume 
https://docs.docker.com/storage/volumes/


On Windows, explicitly stop the container

On Windows systems, CTRL+C does not stop the container. 
So, first type CTRL+C to get the prompt back (or open another shell), 
then type docker container ls to list the running containers, followed by docker container stop <Container NAME or ID> to stop the container. 
Otherwise, you get an error response from the daemon when you try to re-run the container in the next step.


