Java vs OSGi Class Loading
	https://medium.com/@technospace/java-vs-osgi-class-loading-17a1ad4cc2a5

		For example, every class you write extends from java.lang.Object. Your class is loaded by the application classloader, but java.lang.Object is loaded by the boot classloader. This works because of delegation: one classloader can ask another classloader to load a class on its behalf.

		In OSGi it's exactly the same thing. Each bundle has a classloader, and when you import a package from another bundle, that other bundle's classloader is used to load them.

Getting Started with OSGi
https://www.osgi.org/learning-resources-tutorials/tutorial-archive/



Liferay Fundamentals
https://dev.liferay.com/en/develop/tutorials/-/knowledge_base/7-0/fundamentals


Liferay OSGI AND MODULARITY
https://dev.liferay.com/en/develop/tutorials/-/knowledge_base/7-0/osgi-and-modularity
https://web.liferay.com/web/user.26526/blog/-/blogs/liferay-osgi-annotations-what-they-are-and-when-to-use-them
https://dev.liferay.com/en/develop/tutorials/-/knowledge_base/7-0/modularizing-an-existing-portlet

Apache Felix Service Component Runtime (SCR)
http://felix.apache.org/documentation/subprojects/apache-felix-service-component-runtime.html



OSGi Declarative Services
https://dzone.com/articles/osgi-declarative-services-and-the-registry
https://dzone.com/articles/structure-of-an-osgi-application-with-declarative
http://blog.vogella.com/2016/06/21/getting-started-with-osgi-declarative-services/