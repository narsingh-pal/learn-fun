## https://tomcat.apache.org/connectors-doc-archive/jk2/jk/workershowto.html
### Define worker names
#Define jk status and jk  manager
##worker.list - Allows you to specifically name any workers that should be loaded when the server starts up. These are the only workers to which you can map requests in httpd.conf. This has more uses when using mod_jk as a proxy server. For our purposes, the two workers we've defined are enough.
##worker.list=jkstatus
# Define real worker named tomcat1,tomcat2 or loadbalancer
worker.list=tomcat1,tomcat2,tomcat3,loadbalancer,jkstatus



##General Worker Directives
##    These are directives that pertain specifically to workers, but not to virtual workers. They always take the following form:
##    worker.[name].[directive]=[value]
######################################################################################################################
######################################################################################################################
##    Worker names are defined as part of a directive (unless set in worker.list). Subsequent directives using the same name value will apply to the same worker. Names may only contain underscores, dashes, and alphanumeric characters, and are case sensitive.

##    There is a very long list of worker directives, allowing configuration of everything from session replication partner nodes, to connection timeout values, to weights for use with load balancing algorithms. It's even possible to include workers within multiple nodes, allowing you to do things such as using a very fast server as a pinch hitter to handle spikes in multiple clusters. The extensive control this provides over load balancing scenarios is the reason why using mod_jk over mod_proxy is currently worth the extra configuration trouble. As this is a simple tutorial, we won't go into the list here, but you can find the whole thing on the Apache project site, and it is highly recommended reading.

##.........................................................................................................................
##    worker.[name].type - This allows you to declare a "type" for a given worker. This type can either refer to a virtual worker type (i.e. "lb" for load balancer worker, "status" for the status worker), or to the protocol that the server should use to communicate with a real worker.
##    Here, we use the type ajp13, which refers to the latest version of the Apache Jserv Protocol, as well as the "lb" and "status" types, which define the virtual load balancing and status manager workers.
##.........................................................................................................................
##    worker.[name].host - this allows you to define the appropriate host for a worker. You can also include port in this entry by separating the host name from the port value with a ":".
##.........................................................................................................................
##    worker.[name].port - This allows you to set a port number to access the relevant server. This is especially useful if you want to cluster multiple Tomcat instances running on a single server.


##############Load Balancer Directives##############
##    The mod_jk virtual workers each have their own specialized subsets of directives, which provide extra levels of control over their functions. For example, although the "lb" worker uses a load balancing algorithm based on requests and each server's lbfactor to distribute the load by default, mod_jk actually includes three additional load balancing algorithms, some of which are more appropriate for certain situations, and can be configured with the "method" directive.

##    As this is a bare-bones example configuration, we haven't configured any non-required directives, but as with the worker directives, the full list is available on the Tomcat Connectors project site, and is recommended reading.

##############worker.[name].balance_workers=[name1],[name2],â€¦[name[n]] ##############- 
##    this is the only required load balancer directive, and is used to associate a group of workers with a given load balancer. You can define multiple load balancer names in the global worker list if you will be balancing multiple clusters with a single Apache instance.

## If you'd like to learn more about load balancing with mod_jk, visit the load balancing how-to article on the Apache site.
##    https://tomcat.apache.org/connectors-doc/common_howto/loadbalancers.html
######################################################################################################################
######################################################################################################################



# Set properties for worker named tomcat1 to use ajp13 protocol,
# and run on port 8010
worker.tomcat1.type=ajp13
worker.tomcat1.host=localhost
worker.tomcat1.port=8010
worker.tomcat1.lbfactor=50
worker.tomcat1.socket_keepalive=1
worker.tomcat1.socket_timeout=300

# Set properties for worker named tomcat2 to use ajp13 protocol,
# and run on port 8011

worker.tomcat2.type=ajp13
worker.tomcat2.host=localhost
worker.tomcat2.port=8011
worker.tomcat2.lbfactor=50
worker.tomcat2.socket_keepalive=1
worker.tomcat2.socket_timeout=300

# Set properties for worker named tomcat3 to use ajp13 protocol,
# and run on port 8012

worker.tomcat3.type=ajp13
worker.tomcat3.host=localhost
worker.tomcat3.port=8012
worker.tomcat3.lbfactor=50
worker.tomcat3.socket_keepalive=1
worker.tomcat3.socket_timeout=300


#Load Balance worker configuration

worker.loadbalancer.type=lb
worker.loadbalancer.balanced_workers=tomcat1,tomcat2,tomcat3

worker.jkstatus.type=status